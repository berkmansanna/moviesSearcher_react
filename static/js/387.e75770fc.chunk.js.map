{"version":3,"file":"static/js/387.e75770fc.chunk.js","mappings":"8OAEaA,EAAUC,EAAAA,GAAAA,QAAH,+FAMPC,EAAgBD,EAAAA,GAAAA,IAAH,wHAQbE,EAAqBF,EAAAA,GAAAA,IAAH,yIAQlBG,EAAUH,EAAAA,GAAAA,IAAH,uFAMPI,EAAWJ,EAAAA,GAAAA,GAAH,6DAKRK,EAAgBL,EAAAA,GAAAA,GAAH,6D,SCe1B,EApCa,SAAC,GAAY,IAAVM,EAAS,EAATA,GACd,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAQA,IANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAiBL,GACdM,MAAK,SAAAC,GAAI,OAAIJ,EAAQI,EAAKL,SAC1BM,MAFH,WAGC,CAACR,IAECE,EAIL,OACE,SAACT,EAAD,WACE,SAACE,EAAD,UACGO,EAAKO,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,aAAcZ,EAAS,EAATA,GAC1C,OACE,2BACE,SAACJ,EAAD,UACGgB,IACC,SAACf,EAAD,CACEgB,IAAG,yCAAoCD,GACvCE,IAAKJ,OAIX,SAACZ,EAAD,UAAWY,KACX,UAACX,EAAD,yBAA2BY,OAVpBX","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n  width: 100%;\n  background-color: #e2e2e2;\n  padding: 32px 0 40px;\n`;\n\nexport const CastConteiner = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n\n  margin-top: 25px;\n`;\n\nexport const CastDiscrConteiner = styled.div`\n  height: 550px;\n  display: flex;\n  align-items: center;\n  background-color: tomato;\n  border-radius: 10px;\n`;\n\nexport const CastImg = styled.img`\n  height: 100%;\n  object-fit: cover;\n  border-radius: 10px;\n`;\n\nexport const CastName = styled.h2`\n  color: #515151;\n  padding: 10px;\n`;\n\nexport const CastCharacter = styled.h3`\n  color: #515151;\n  padding: 10px;\n`;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getMovieCastById } from 'API/moviesAPI';\n\nimport {\n  CastConteiner,\n  CastDiscrConteiner,\n  CastImg,\n  Section,\n  CastName,\n  CastCharacter,\n} from './Cast.styled';\n\nconst Cast = ({ id }) => {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    getMovieCastById(id)\n      .then(data => setCast(data.cast))\n      .catch(`Error`);\n  }, [id]);\n\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <Section>\n      <CastConteiner>\n        {cast.map(({ name, character, profile_path, id }) => {\n          return (\n            <ul key={id}>\n              <CastDiscrConteiner>\n                {profile_path && (\n                  <CastImg\n                    src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                    alt={name}\n                  />\n                )}\n              </CastDiscrConteiner>\n              <CastName>{name}</CastName>\n              <CastCharacter>Character: {character}</CastCharacter>\n            </ul>\n          );\n        })}\n      </CastConteiner>\n    </Section>\n  );\n};\nexport default Cast;\n\nCast.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n"],"names":["Section","styled","CastConteiner","CastDiscrConteiner","CastImg","CastName","CastCharacter","id","useState","cast","setCast","useEffect","getMovieCastById","then","data","catch","map","name","character","profile_path","src","alt"],"sourceRoot":""}